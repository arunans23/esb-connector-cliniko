<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (c) 2005-2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

   WSO2 Inc. licenses this file to you under the Apache License,
   Version 2.0 (the "License"); you may not use this file except
   in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied. See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<!--This scenario will create appointments in Cliniko and events in Google Calendar using tickets in Livechat. -->
<proxy xmlns="http://ws.apache.org/ns/synapse" name="cliniko_retrieveTicketsAndCreateAppointments" transports="https,http" statistics="disable" trace="disable" startOnLoad="true">
   <target>
      <inSequence onError="faultHandlerSeq">
        <!-- Cliniko Properties -->
         <property name="cliniko.apiUrl" expression="get-property('registry', 'connectors/Cliniko/apiUrl')" />
         <property name="cliniko.apiKey" expression="get-property('registry', 'connectors/Cliniko/apiKey')" />
         <property name="cliniko.appointmentType" expression="json-eval($.cliniko.appointmentType)" />

         <!-- Livechat Properties -->
         <property name="livechat.apiUrl" expression="get-property('registry', 'connectors/Livechat/apiUrl')" />
         <property name="livechat.login" expression="get-property('registry', 'connectors/Livechat/login')" />
         <property name="livechat.apiKey" expression="get-property('registry', 'connectors/Livechat/apiKey')" />

         <!-- GoogleCalendar Properties -->
         <property name="googlecalendar.apiUrl" expression="get-property('registry', 'connectors/Googlecalendar/apiUrl')" />
         <property name="googlecalendar.accessToken" expression="get-property('registry', 'connectors/Googlecalendar/accessToken')" />
         <property name="googlecalendar.calendarId" expression="json-eval($.googlecalendar.calendarId)" />

          <!-- Shared Properties -->
         <property name="shared.timeZone" expression="json-eval($.shared.timeZone)" />
         
         <!-- Operation scoped properties -->
         <property name="responseString" value="" scope="operation" />

         <!--Call cliniko connector listPatients method to list all the patients -->
         <cliniko.init>
            <apiUrl>{$ctx:cliniko.apiUrl}</apiUrl>
            <apiKey>{$ctx:cliniko.apiKey}</apiKey>
         </cliniko.init>
         <cliniko.listPatients/>

         <!-- Get the response status. -->
         <property name="responseStatus" expression="$axis2:HTTP_SC" />

         <!-- START: Proceed only if the call is successful. -->
         <filter xpath="get-property('responseStatus') != 200">
            <then>
               <!-- Append an error message to be sent to the user. -->
               <property name="error" expression="json-eval($)" />
               <call-template target="responseHandlerTemplate">
                  <with-param name="activity" value="cliniko_listPatients" />
                  <with-param name="id" value="{$ctx:id.empty}" />
                  <with-param name="status" value="error" />
                  <with-param name="message" value="{$ctx:error}" />
               </call-template>
               <loopback />
            </then>
         </filter>
         <!-- END: Proceed only if the call is successful. -->

         <!--Construct an object to store the patient's email and the ID-->
         <script language="js">
            <![CDATA[
               payload = mc.getPayloadJSON();
			   var patientArray = payload.patients;
               var patientObj = {};
               for(var i=0;i<patientArray.length;i++) {
                  patientObj[patientArray[i].email] = patientArray[i].id;
               }
               for(var key in patientObj) {
                  var id = patientObj[key];
               }
               
                mc.setPayloadJSON(patientObj);
               
            ]]>
         </script>
         
         <property name="cliniko.patientObject" expression="json-eval($.)" />
         
         <!--Call cliniko connector getAppointmentType method to get appointment types -->
         <cliniko.init>
            <apiUrl>{$ctx:cliniko.apiUrl}</apiUrl>
            <apiKey>{$ctx:cliniko.apiKey}</apiKey>
         </cliniko.init>
         <cliniko.getAppointmentType/>
         
         <!--Get the ID of the given appointmentType-->
         <script language="js">
            <![CDATA[
               payload = mc.getPayloadJSON();
			   var appointmentTypeArray = payload.appointment_types;
               var appType = mc.getProperty('cliniko.appointmentType');
               for(var i=0;i<appointmentTypeArray.length;i++) {
                  var name = appointmentTypeArray[i].name;
                  if(appType.toLowerCase() == name.toLowerCase()) {
                     var id = ''+appointmentTypeArray[i].id;
                     mc.setProperty('cliniko.appointmentTypeId',id);
                     break;
                  }
               }
               mc.setProperty('livechat.dateFrom',new java.text.SimpleDateFormat('yyyy-MM-dd').format(new java.util.Date()));
            ]]>
         </script>
         
         <!-- START: Proceed only if the appointmentType is existing. -->
         <filter source="boolean(get-property('cliniko.appointmentTypeId') )" regex="false">
            <then>
               <property name="id" value="{}" />
               <property name="status" value="skipped" />
               <property name="message" value="The given Appointment Type is invalid." />
               <call-template target="responseHandlerTemplate">
                  <with-param name="id" value="{$ctx:id}" />
                  <with-param name="activity" value="cliniko_listAppointmentTypes" />
                  <with-param name="status" value="{$ctx:status}" />
                  <with-param name="message" value="{$ctx:message}" />
               </call-template>
               <loopback />
            </then>
         </filter>
         <!-- END: Proceed only if the appointmentType is existing. -->
         
         <!--Extract cliniko_getSettingsSeq to get details of cliniko  account-->
         <sequence key="cliniko_getSettingsSeq" />
         
         <!--Call livechat connector listTickets method to list all the tickets tagged as 'Appointments'-->
         <livechat.init>
            <apiUrl>{$ctx:livechat.apiUrl}</apiUrl>
            <login>{$ctx:livechat.login}</login>
            <apiKey>{$ctx:livechat.apiKey}</apiKey>
         </livechat.init>
         <livechat.listTickets>
            <tag>Appointments</tag>
            <dateFrom>{$ctx:livechat.dateFrom}</dateFrom>
         </livechat.listTickets>
      
       <!-- START: Proceed only if the call is successful. -->
      <filter xpath="get-property('responseStatus') != 200">
         <then>
            <!-- Append an error message to be sent to the user. -->
            <property name="livechat.errorResponse" expression="json-eval($)" />
            <call-template target="responseHandlerTemplate">
               <with-param name="activity" value="livechat_listTickets" />
               <with-param name="id" value="{$ctx:id.empty}" />
               <with-param name="status" value="error" />
               <with-param name="message" value="{$ctx:livechat.errorResponse}" />
            </call-template>
            <loopback />
         </then>
      </filter>
       <!-- END: Proceed only if the call is successful. -->
      
      <property name="ticketIndex" expression="0" scope="operation" />
      <property name="livechat.ticketCount" expression="count(//tickets)" />
      
      <!-- START: Proceed only if there is at least one ticket -->
      <filter xpath="get-property('livechat.ticketCount') = 0.0">
         <then>
            <property name="id" value="{}" />
            <property name="status" value="skipped" />
            <property name="message" value="There are no tickets to process" />
            <call-template target="responseHandlerTemplate">
               <with-param name="id" value="{$ctx:id}" />
               <with-param name="activity" value="livechat_listTickets" />
               <with-param name="status" value="{$ctx:status}" />
               <with-param name="message" value="{$ctx:message}" />
            </call-template>
            <loopback />
         </then>
      </filter>
      <!-- END: Proceed only if there is at least one ticket -->
      
      <!--BEGIN : FOR EACH ticket -->
      <iterate continueParent="false" id="tickets" expression="//tickets" sequential="true">
         <target>
            <sequence>
               <property name="livechat.ticketId" expression="json-eval($.tickets.id)" />
               <property name="livechat.ticketSubject" expression="json-eval($.tickets.subject)" />
               <property name="livechat.requesterEmail" expression="json-eval($.tickets.requester.mail)" />
               <property name="livechat.requesterName" expression="json-eval($.tickets.requester.name)" />
               <property name="livechat.ticketName" expression="json-eval($.tickets.events[0].message)" />
               
			   
                <!--Check whether the patient is already existing using the above created patient object-->
                <script language="js">
                  <![CDATA[
                     var patientObj = eval("(" + mc.getProperty('cliniko.patientObject') + ")");
                     
                     var requesterMail = mc.getProperty('livechat.requesterEmail');
                     var requesterName = mc.getProperty('livechat.requesterName');
                     var subject = mc.getProperty('livechat.ticketSubject');
                     
                     var practioner = subject.match(/\(([^)]+)\)/)[1].split(':')[1];
                     mc.setProperty("cliniko.practionerId",practioner);
                     
                     if(patientObj.hasOwnProperty(requesterMail)) {
                        var id = ''+patientObj[requesterMail];
                        mc.setProperty("cliniko.patientId",id);
                     } else {
                        var firstName = requesterName.split(" ")[0];
                        var lastName = requesterName.split(" ")[1];
                        mc.setProperty("cliniko.firstName",firstName);
                        mc.setProperty("cliniko.lastName",lastName);
                     }
                  ]]>
               </script>
               
               <!-- START: Proceed according to the existence of the patient in cliniko -->
               <filter source="boolean(get-property('cliniko.patientId'))" regex="false">
                  <then>
                     <!--Call cliniko connector createPatient method to create a new patient -->
                     <cliniko.init>
                        <apiUrl>{$ctx:cliniko.apiUrl}</apiUrl>
                        <apiKey>{$ctx:cliniko.apiKey}</apiKey>
                     </cliniko.init>
                     <cliniko.createPatient>
                        <email>{$ctx:livechat.requesterEmail}</email>
                        <firstName>{$ctx:cliniko.firstName}</firstName>
                        <lastName>{$ctx:cliniko.lastName}</lastName>
                     </cliniko.createPatient>
                     
                     <property name="cliniko.patientId" expression="json-eval($.id)" />
                     
                     <!-- START: Append the response message according to the createPatient response -->
                     <filter source="boolean(get-property('cliniko.patientId'))" regex="false">
                        <then>
                            <property name="id" expression="fn:concat('livechat_ticketId:',get-property('livechat.ticketId'))" />
                            <property name="status" value="error" />
                            <property name="message" expression="json-eval($)" />
                        </then>
                        <else>
                            <property name="id" expression="fn:concat('livechat_ticketId:',get-property('livechat.ticketId'),',cliniko_patientId:',get-property('cliniko.patientId'))" />
                            <property name="status" value="success" />
                            <property name="message" value="A patient has been successfully created." />
                        </else>
                     </filter>
                     <!--Call the responseHandler template-->
                     <call-template target="responseHandlerTemplate">
                        <with-param name="activity" value="cliniko_createPatient" />
                        <with-param name="id" value="{$ctx:id}" />
                        <with-param name="status" value="{$ctx:status}" />
                        <with-param name="message" value="{$ctx:message}" />
                     </call-template>
                     
                  </then>
               </filter>
               <!-- END: Proceed according to the existence of the patient in cliniko -->
               
               <property name="uri.var.urlQuery" action="remove"/>
               
               <!-- START: Process only if the patient is existing -->
               <filter source="boolean(get-property('cliniko.patientId'))" regex="true">
                  <then>
                     <!-- Call createAppointments template to create appointments and events -->
                      <call-template target="createAppointments">
                          <with-param name="cliniko.apiKey" value="{$ctx:cliniko.apiKey}" />
                          <with-param name="cliniko.apiUrl" value="{$ctx:cliniko.apiUrl}" />
                          <with-param name="cliniko.patientId" value="{$ctx:cliniko.patientId}" />
                          <with-param name="cliniko.practionerId" value="{$ctx:cliniko.practionerId}" />
                          <with-param name="cliniko.accountName" value="{$ctx:cliniko.accountName}" />
                          <with-param name="common.id" value="{$ctx:livechat.ticketId}" />
                          <with-param name="cliniko.appointmentNote" value="{$ctx:livechat.ticketName}" />
                          <with-param name="googlecalendar.apiUrl" value="{$ctx:googlecalendar.apiUrl}" />
                          <with-param name="googlecalendar.accessToken" value="{$ctx:googlecalendar.accessToken}" />
                          <with-param name="googlecalendar.calendarId" value="{$ctx:googlecalendar.calendarId}" />
                          <with-param name="shared.timeZone" value="{$ctx:shared.timeZone}" />
                      </call-template>
                  </then>
               </filter>
               <!-- END: Process only if the patient is existing -->
			   
               <property name="ticketIndex" expression="get-property('operation','ticketIndex') + 1" scope="operation" />
               <filter xpath="get-property('operation','ticketIndex') = get-property('livechat.ticketCount')">
                  <then>
                     <loopback />
                  </then>
               </filter>
            </sequence>
         </target>
      </iterate>
       <!--END : FOR EACH ticket -->
         
      </inSequence>

      <outSequence>
         <property name="messageType" value="application/json" scope="axis2" />
         <filter source="boolean(get-property('operation', 'responseString'))" regex="false">
            <then>
               <payloadFactory media-type="json">
                  <format>{
                     "Response":{
                        "process":"cliniko_retrieveTicketsAndCreateAppointments",
                        "activityResponse":"No new appointments were created since the patients already have appointments with the practitioner."
                     }
                  }</format>
               </payloadFactory>
            </then>
            <else>
               <payloadFactory media-type="json">
                  <format>{
						"Response":{
							"process":"cliniko_retrieveTicketsAndCreateAppointments",
							"activityResponse":[$1]
						}
					}</format>
                  <args>
                     <arg expression="get-property('operation', 'responseString')" />
                  </args>
               </payloadFactory>
            </else>
         </filter>
         <send />
      </outSequence>
   </target>
</proxy>
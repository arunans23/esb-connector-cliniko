<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (c) 2005-2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

   WSO2 Inc. licenses this file to you under the Apache License,
   Version 2.0 (the "License"); you may not use this file except
   in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied. See the License for the
   specific language governing permissions and limitations
   under the License.
-->

<!--Create completed invoices and send them to the customers for the cliniko invoices -->
<sequence xmlns="http://ws.apache.org/ns/synapse" name="billomat-createCompletedInvoiceSeq">

   <!--Call billomat connector listClients method to list the clients with the email related to the sale -->
   <billomat.init>
      <apiUrl>{$ctx:billomat.apiUrl}</apiUrl>
      <apiKey>{$ctx:billomat.apiKey}</apiKey>
      <format>json</format>
   </billomat.init>
   <billomat.listClients>
      <email>{$ctx:cliniko.patientEmail}</email>
   </billomat.listClients>

   <property name="billomat.clientTotal" expression="json-eval($.clients.@total)" />
   <property name="billomat.clientId" expression="json-eval($.clients.client.id)" />
      
   <sequence key="removeResponseHeaders" />

   <!-- START: Process only if the client does not exist with the given email -->
   <filter xpath="get-property('billomat.clientTotal') = '0'">
      <then>
         <!--Call billomat connector createClient method to create the client -->
         <billomat.init>
            <apiUrl>{$ctx:billomat.apiUrl}</apiUrl>
            <apiKey>{$ctx:billomat.apiKey}</apiKey>
            <format>json</format>
         </billomat.init>
         <billomat.createClient>
            <city>{$ctx:cliniko.patientCity}</city>
            <firstName>{$ctx:cliniko.patientFirstName}</firstName>
            <lastName>{$ctx:cliniko.patientLastName}</lastName>
            <email>{$ctx:cliniko.patientEmail}</email>
         </billomat.createClient>
         <property name="billomat.clientId" expression="json-eval($.client.id)" />

         <!-- START: Append the response message if the createClient fails -->
         <filter source="boolean(get-property('billomat.clientId'))" regex="false">
            <then>
               <property name="id" expression="fn:concat('cliniko_patientId:',get-property('cliniko.patientId'))" />
               <property name="status" value="error" />
               <property name="message" expression="json-eval($)" />
            </then>
            <else>
               <property name="id" expression="fn:concat('cliniko_patientId:',get-property('cliniko.patientId'),',billomat_customerId:',get-property('billomat.clientId'))" />
               <property name="status" value="success" />
               <property name="message" value="A customer has been successfully created." />
            </else>
         </filter>
         <call-template target="responseHandlerTemplate">
            <with-param name="activity" value="billomat_createCustomer" />
            <with-param name="id" value="{$ctx:id}" />
            <with-param name="status" value="{$ctx:status}" />
            <with-param name="message" value="{$ctx:message}" />
         </call-template>
      </then>
   </filter>
   <!-- END: Process only if the client does not exist with the given email -->

   <!--Extract cliniko_getSettingsSeq to get details of cliniko -->
   <sequence key="cliniko_getSettingsSeq" />
   
   <sequence key="removeResponseHeaders" />

   <!-- START: Process only if the clientID is existing -->
   <filter source="boolean(get-property('billomat.clientId'))" regex="true">
      <then>
        
        <payloadFactory media-type="json">
            <format>
               {
                  "invoice-item":[
                     {
                        "title":"$1",
                        "quantity":1,
                        "unit_price":"$2",
                        "unit":"piece"
                     }
                  ]
               }
            </format>
            <args>
               <arg expression="get-property('cliniko.notes')" />
               <arg expression="get-property('cliniko.netAmount')" />
            </args>
         </payloadFactory>
         
         <property name="billomat.items" expression="json-eval($.)" />
        
         <!--Call billomat connector createInvoice method to create an Invoice -->
         <billomat.init>
            <apiUrl>{$ctx:billomat.apiUrl}</apiUrl>
            <apiKey>{$ctx:billomat.apiKey}</apiKey>
            <format>json</format>
         </billomat.init>
         <billomat.createInvoice>
            <clientId>{$ctx:billomat.clientId}</clientId>
            <number>{$ctx:cliniko.invoiceId}</number>
            <numberPre>Cliniko</numberPre>
            <invoiceItems>{$ctx:billomat.items}</invoiceItems>
         </billomat.createInvoice>
         <property name="uri.var.billomat.invoiceId" expression="json-eval($.invoice.id)" />

         <!-- START: Append the response message if the createInvoice call fails and if not proceed with the completion of the invoice -->
         <filter source="boolean(get-property('uri.var.billomat.invoiceId'))" regex="false">
            <then>
               <property name="id" expression="fn:concat('cliniko_invoiceId:',get-property('cliniko.invoiceId'))" />
               <property name="status" value="error" />
               <property name="message" expression="json-eval($)" />
               <!--Call the responseHandler template -->
               <call-template target="responseHandlerTemplate">
                  <with-param name="activity" value="billomat_createInvoice" />
                  <with-param name="id" value="{$ctx:id}" />
                  <with-param name="status" value="{$ctx:status}" />
                  <with-param name="message" value="{$ctx:message}" />
               </call-template>
            </then>
            <else>
               <billomat.init>
                  <apiUrl>{$ctx:billomat.apiUrl}</apiUrl>
                  <apiKey>{$ctx:billomat.apiKey}</apiKey>
                  <format>json</format>
               </billomat.init>
               <billomat.completeInvoice>
                  <invoiceId>{$ctx:uri.var.billomat.invoiceId}</invoiceId>
               </billomat.completeInvoice>

               <!-- START: Proceed with the sending the completed invoice if it is completed -->
               <filter source="$axis2:HTTP_SC" regex="200">
                  <then>
				   <property name="id" expression="fn:concat('cliniko_invoiceId:',get-property('cliniko.invoiceId'),',billomat_invoiceId:',get-property('uri.var.billomat.invoiceId'),',cliniko_patientId:',get-property('cliniko.patientId'))" />
				   <property name="status" value="success" />
				   <property name="message" value="The invoice has been successfully created." />
				</then>
				<else>
				   <property name="id" expression="fn:concat('cliniko_invoiceId:',get-property('cliniko.invoiceId'),',billomat_invoiceId:',get-property('uri.var.billomat.invoiceId'))" />
				   <property name="status" value="error" />
				   <property name="message" expression="json-eval($.)" />
				</else>
			 </filter>
			 <!-- END: Append the response message according to the completeInvoice response -->
			 <call-template target="responseHandlerTemplate">
				<with-param name="activity" value="billomat_createInvoice" />
				<with-param name="id" value="{$ctx:id}" />
				<with-param name="status" value="{$ctx:status}" />
				<with-param name="message" value="{$ctx:message}" />
			 </call-template>
            </else>
         </filter>
         <!-- END: Append the response message if the createClient call fails -->
 
         <!--Dummy call is made cause of the empty payload of the last completeInvoice call-->
         <cliniko.init>
            <apiUrl>{$ctx:cliniko.apiUrl}</apiUrl>
            <apiKey>{$ctx:cliniko.apiKey}</apiKey>
         </cliniko.init>
         <cliniko.getSettings>
         </cliniko.getSettings>
 
         <sequence key="removeResponseHeaders" />
         
      </then>
   </filter>
   <!-- END: Process only if the clientID is existing -->
</sequence>

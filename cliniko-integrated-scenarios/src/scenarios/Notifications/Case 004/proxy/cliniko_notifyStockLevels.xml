<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (c) 2005-2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

   WSO2 Inc. licenses this file to you under the Apache License,
   Version 2.0 (the "License"); you may not use this file except
   in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<!--Send the details of the product with lower stock levels to the cliniko administrator.-->
<proxy xmlns="http://ws.apache.org/ns/synapse" name="cliniko_notifyStockLevels" transports="https http" startOnLoad="true" trace="disable">
    <description />
    <target>
        <inSequence onError="faultHandlerSeq">
            <!-- Cliniko Properties -->
            <property name="cliniko.apiUrl" expression="get-property('registry', 'connectors/Cliniko/apiUrl')" />
            <property name="cliniko.apiKey" expression="get-property('registry', 'connectors/Cliniko/apiKey')" />
			
            <!-- Madnrill Properties -->
            <property name="mandrill.apiUrl" expression="get-property('registry', 'connectors/Mandrill/apiUrl')" />
            <property name="mandrill.apiKey" expression="get-property('registry', 'connectors/Mandrill/apiKey')" />
            <property name="mandrill.fromName" expression="json-eval($.mandrill.fromName)" />
            <property name="mandrill.fromEmail" expression="json-eval($.mandrill.fromEmail)" />
			
            <!--Extract cliniko_getSettingsSeq to get details of cliniko.-->
            <sequence key="cliniko_getSettingsSeq" />
			
            <!--Call cliniko connector listProducts method to list all the products. -->
            <cliniko.init>
                <apiUrl>{$ctx:cliniko.apiUrl}</apiUrl>
                <apiKey>{$ctx:cliniko.apiKey}</apiKey>
            </cliniko.init>
            <cliniko.listProducts/>
			
            <!-- START: Proceed only if the Products are retrieved successfully. -->
            <filter source="$axis2:HTTP_SC" regex="200">
                <then>
                    <property name="cliniko.productCount" expression="count(//products)" />
					
                    <!-- START: Proceed only if there is at least one product. -->
                    <filter xpath="get-property('cliniko.productCount') = 0.0">
                        <then>
                            <property name="id" value="{}" />
                            <property name="status" value="skipped" />
                            <property name="message" value="There are no products to process." />
                            <call-template target="responseHandlerTemplate">
                                <with-param name="id" value="{$ctx:id}" />
                                <with-param name="activity" value="cliniko_listProducts" />
                                <with-param name="status" value="{$ctx:status}" />
                                <with-param name="message" value="{$ctx:message}" />
                            </call-template>
                            <loopback/>
                        </then>
                        <else>
                            <!-- Extract the re-order point for the product -->
                            <script language="js">
                                <![CDATA[
									 var payload = mc.getPayloadJSON();
									 var products = payload.products;
									 var prodString='';
									 
									 var requesterName = mc.getProperty('cliniko.adminFirstName');		
									 var requesterEmail = mc.getProperty('cliniko.adminEmail');		
									 
									 var mailHTML = "<h3>Dear " + requesterName + ",</h3><p>Please be informed that the following products are running out of the stock.</p><br/><div><style>table, th, td {border-style: solid; border-width: 1px;}</style><table><tr><th>Name</th><th>Stock Level</th><th>Re-Order Level</th></tr>";
									 
									 for(var i=0;i<products.length;i++) {
										var id = products[i].id;
										var name = products[i].name;
										var supplier = ''+products[i].product_supplier_name;
										supplier = supplier.split('-')[1];
										var stockLevel = products[i].stock_level;
										var reOrderPoint = supplier.match(/\(([^)]+)\)/)[1].split(':')[1];
										
										if(reOrderPoint != undefined || reOrderPoint !=null ) {
										   if(stockLevel<=reOrderPoint) {
											  var stock = id+'-'+stockLevel+',';
											  mailHTML = mailHTML + "<tr><td> "+name+ "</td><td>"+stockLevel+"</td><td>"+reOrderPoint+"</td></tr>";
											  prodString = prodString + stock;
										   }
										}
										
									 }
									 mailHTML = mailHTML + "</table></div><br/><p>This is an auto-generated email. Please do not reply.</p><p>Thank you</p>";
									 
									 mc.setProperty('mandrill.html', mailHTML);																		
									 mc.setProperty('mandrill.subject', 'Stock Report');																		
									 var mailTo = '[{"email": "' + requesterEmail + '", "name": "' + requesterName + '", "type": "to"}]';
									 mc.setProperty('mandrill.to', mailTo);
								]]>
                            </script>
							
                            <property name="mandrill.html" expression="fn:concat('&lt;html&gt;', get-property('mandrill.html'), '&lt;/html&gt;')" />
                            
							<!-- Call mandril sendMessage method to Send stock level to the customer. -->
                            <mandrill.init>
                                <apiKey>{$ctx:mandrill.apiKey}</apiKey>
                                <apiUrl>{$ctx:mandrill.apiUrl}</apiUrl>
                                <format>json</format>
                            </mandrill.init>
                            <mandrill.sendMessage>
                                <html>{$ctx:mandrill.html}</html>
                                <subject>{$ctx:mandrill.subject}</subject>
                                <fromEmail>{$ctx:mandrill.fromEmail}</fromEmail>
                                <fromName>{$ctx:mandrill.fromName}</fromName>
                                <important>false</important>
                                <autoHtml>true</autoHtml>
                                <urlStripQs>false</urlStripQs>
                                <preserveRecipients>true</preserveRecipients>
                                <viewContentLink>true</viewContentLink>
                                <to>{$ctx:mandrill.to}</to>
                            </mandrill.sendMessage>
                            <property name="mandrill.mailId" expression="json-eval($[0]._id)" />
							
                            <!-- START: Append a message to be sent to the user regarding the status of the send email operation. -->
                            <filter source="boolean(get-property('mandrill.mailId'))" regex="true">
                                <then>
                                    <property name="id" value="{}" />
                                    <property name="status" value="success" />
                                    <property name="message" value="Insufficient stock levels of the products have been successfully notified to the administrator." />
                                </then>
                                <else>
                                    <property name="id" value="{}" />
                                    <property name="status" value="error" />
                                    <property name="message" expression="json-eval($)" />
                                </else>
                            </filter>
                            <!-- END: Append a message to be sent to the user regarding the status of the send email operation. -->
                            <call-template target="responseHandlerTemplate">
                                <with-param name="activity" value="mandrill_sendStockDetails" />
                                <with-param name="id" value="{$ctx:id}" />
                                <with-param name="status" value="{$ctx:status}" />
                                <with-param name="message" value="{$ctx:message}" />
                            </call-template>
                            <loopback/>
                        </else>
                    </filter>
                    <!-- END: Proceed only if there is at least one product -->
                </then>
                <else>
                    <property name="id" value="{}" />
                    <property name="status" value="error" />
                    <property name="message" expression="json-eval($.)" />
                    <call-template target="responseHandlerTemplate">
                        <with-param name="activity" value="cliniko_listProducts" />
                        <with-param name="id" value="{$ctx:id}" />
                        <with-param name="status" value="{$ctx:status}" />
                        <with-param name="message" value="{$ctx:message}" />
                    </call-template>
                    <loopback/>
                </else>
            </filter>
            <!-- END: Proceed only if the product are retrieved successfully. -->
        </inSequence>
        <outSequence>
            <property name="messageType" value="application/json" scope="axis2" />
            <payloadFactory media-type="json">
                <format>{
				"Response":{
					"process":"cliniko_notifyStockLevels",
					"activityResponse":[$1]
				}
				}</format>
                <args>
                    <arg expression="get-property('operation', 'responseString')" />
                </args>
            </payloadFactory>
            <send />
        </outSequence>
    </target>
</proxy>